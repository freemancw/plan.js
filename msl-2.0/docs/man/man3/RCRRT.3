.TH "RCRRT" 3 "24 Jul 2003" "Motion Strategy Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RCRRT \- Resolution Complete Rapidly-Exploring Random Trees , by Peng Cheng and Steven M. LaValle, submitted to 2002 IEEE International Conference on Robotics and Automation. Techniques applied to improve the performance: (1) Combining systematic search with random search such that it has both the completeness of the systematic search and fast searching of the random search. (2) Constraint violation tendency to avoid obstacles This basic planner is used to do the experiment with dynamic car model in the virtual town. The rolling effect of the car and the nonlinear tire model are considered in the model. 
.SH SYNOPSIS
.br
.PP
\fC#include <rcrrt.h>\fP
.PP
Inherits \fBRRTGoalBias\fP.
.PP
Inherited by \fBRCRRTBall\fP, and \fBRCRRTDual\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "bool \fBIsNodeExpanded\fP (\fBMSLNode\fP *\fBx\fP, double &biasvalue, bool forward)"
.br
.RI "\fICheck if this node has been explored (all inputs are expanded) and return the collision tendency information Used in SelectNode function.\fP"
.ti -1c
.RI "virtual bool \fBIsInputApplied\fP (const int &inputindex, const \fBMSLVector\fP &expolreinfo)"
.br
.RI "\fICheck the ith input is failed or not Used in SelectInput function.\fP"
.ti -1c
.RI "virtual void \fBBackWardBiasSet\fP (\fBMSLNode\fP *n, \fBMSLTree\fP *t)"
.br
.RI "\fIback ward along the tree to set the bias value.\fP"
.ti -1c
.RI "double \fBBiasValue\fP (int backstep)"
.br
.RI "\fIbias value function,.\fP"
.ti -1c
.RI "\fBRCRRT\fP (\fBProblem\fP *problem)"
.br
.ti -1c
.RI "virtual \fB~RCRRT\fP ()"
.br
.ti -1c
.RI "virtual \fBMSLNode\fP * \fBSelectNode\fP (const \fBMSLVector\fP &\fBx\fP, \fBMSLTree\fP *t, bool forward)"
.br
.RI "\fISelect the nearestneighbor node according to given metric !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! This function is metric dependent !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Choose the nestest neighbor in the search structure If all nodes are explored, return (NULL) node If there exist unexpanded nodes (1) return the closest node with probability equal collisiontendency (2) or, return the closed node when (2) return nothing.\fP"
.ti -1c
.RI "virtual bool \fBExtend\fP (const \fBMSLVector\fP &\fBx\fP, \fBMSLTree\fP *t, \fBMSLNode\fP *&nn, bool forward)"
.br
.RI "\fIExtend the nearest node to the random state return true: a new node is generated return false: 1. all the successors of the chosen node are in collision 2. no nearest node is chosen because all of them are explored.\fP"
.ti -1c
.RI "virtual \fBMSLVector\fP \fBSelectInput\fP (\fBMSLNode\fP *n1, const \fBMSLVector\fP &x2, \fBMSLVector\fP &nx_best, bool &success, bool forward)"
.br
.RI "\fIThe first parameter is node because the node will be used in the function, xu_new is the new value for the uncontrolled state.\fP"
.ti -1c
.RI "virtual bool \fBConnect\fP (const \fBMSLVector\fP &\fBx\fP, \fBMSLTree\fP *t, \fBMSLNode\fP *&nn, bool forward)"
.br
.RI "\fImethod to increase the extending time because the more time the RCRRT extend in each step, more quickly the overall information of state space is gotten.\fP"
.ti -1c
.RI "virtual bool \fBPlan\fP ()"
.br
.RI "\fIAttempt to solve an Initial-Goal query by growing an \fBRRT\fP.\fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int \fBinputnum\fP"
.br
.RI "\fIthe number of the inputs.\fP"
.ti -1c
.RI "list< \fBMSLVector\fP > \fBinputset\fP"
.br
.RI "\fIinput set.\fP"
.ti -1c
.RI "bool \fBissolutionexist\fP"
.br
.RI "\fItrue, solution possibly exists; false, solution does not exist.\fP"
.ti -1c
.RI "\fBMSLVector\fP \fBinitexploreinfo\fP"
.br
.RI "\fIInitial exploration information initialized with 0.\fP"
.ti -1c
.RI "double \fBinitcoltend\fP"
.br
.RI "\fIInitial collision tendency.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
Resolution Complete Rapidly-Exploring Random Trees , by Peng Cheng and Steven M. LaValle, submitted to 2002 IEEE International Conference on Robotics and Automation. Techniques applied to improve the performance: (1) Combining systematic search with random search such that it has both the completeness of the systematic search and fast searching of the random search. (2) Constraint violation tendency to avoid obstacles This basic planner is used to do the experiment with dynamic car model in the virtual town. The rolling effect of the car and the nonlinear tire model are considered in the model.
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "RCRRT::RCRRT (\fBProblem\fP * problem)"
.PP
.SS "virtual RCRRT::~RCRRT ()\fC [inline, virtual]\fP"
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "void RCRRT::BackWardBiasSet (\fBMSLNode\fP * n, \fBMSLTree\fP * t)\fC [virtual]\fP"
.PP
back ward along the tree to set the bias value.
.PP
.SS "double RCRRT::BiasValue (int backstep)"
.PP
bias value function,.
.PP
.SS "bool RCRRT::Connect (const \fBMSLVector\fP & x, \fBMSLTree\fP * t, \fBMSLNode\fP *& nn, bool forward)\fC [virtual]\fP"
.PP
method to increase the extending time because the more time the RCRRT extend in each step, more quickly the overall information of state space is gotten.
.PP
Reimplemented from \fBRRT\fP.
.PP
Reimplemented in \fBRCRRTBall\fP.
.SS "bool RCRRT::Extend (const \fBMSLVector\fP & x, \fBMSLTree\fP * t, \fBMSLNode\fP *& nn, bool forward)\fC [virtual]\fP"
.PP
Extend the nearest node to the random state return true: a new node is generated return false: 1. all the successors of the chosen node are in collision 2. no nearest node is chosen because all of them are explored.
.PP
Reimplemented from \fBRRT\fP.
.PP
Reimplemented in \fBRCRRTBall\fP.
.SS "bool RCRRT::IsInputApplied (const int & inputindex, const \fBMSLVector\fP & expolreinfo)\fC [virtual]\fP"
.PP
Check the ith input is failed or not Used in SelectInput function.
.PP
.SS "bool RCRRT::IsNodeExpanded (\fBMSLNode\fP * x, double & biasvalue, bool forward)"
.PP
Check if this node has been explored (all inputs are expanded) and return the collision tendency information Used in SelectNode function.
.PP
.SS "bool RCRRT::Plan ()\fC [virtual]\fP"
.PP
Attempt to solve an Initial-Goal query by growing an \fBRRT\fP.
.PP
Reimplemented from \fBRRT\fP.
.PP
Reimplemented in \fBRCRRTDual\fP.
.SS "\fBMSLVector\fP RCRRT::SelectInput (\fBMSLNode\fP * n1, const \fBMSLVector\fP & x2, \fBMSLVector\fP & nx_best, bool & success, bool forward)\fC [virtual]\fP"
.PP
The first parameter is node because the node will be used in the function, xu_new is the new value for the uncontrolled state.
.PP
.SS "\fBMSLNode\fP * RCRRT::SelectNode (const \fBMSLVector\fP & x, \fBMSLTree\fP * t, bool forward)\fC [virtual]\fP"
.PP
Select the nearestneighbor node according to given metric !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! This function is metric dependent !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Choose the nestest neighbor in the search structure If all nodes are explored, return (NULL) node If there exist unexpanded nodes (1) return the closest node with probability equal collisiontendency (2) or, return the closed node when (2) return nothing.
.PP
Reimplemented from \fBRRT\fP.
.PP
Reimplemented in \fBRCRRTBall\fP.
.SH "MEMBER DATA DOCUMENTATION"
.PP 
.SS "double RCRRT::initcoltend"
.PP
Initial collision tendency.
.PP
.SS "\fBMSLVector\fP RCRRT::initexploreinfo"
.PP
Initial exploration information initialized with 0.
.PP
.SS "int RCRRT::inputnum"
.PP
the number of the inputs.
.PP
.SS "list<\fBMSLVector\fP> RCRRT::inputset"
.PP
input set.
.PP
.SS "bool RCRRT::issolutionexist"
.PP
true, solution possibly exists; false, solution does not exist.
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for Motion Strategy Library from the source code.
