.TH "RandomTree" 3 "24 Jul 2003" "Motion Strategy Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RandomTree \- Naively extend the tree by random node selection (not really an \fBRRT\fP). 
.SH SYNOPSIS
.br
.PP
\fC#include <rrt.h>\fP
.PP
Inherits \fBRRT\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBRandomTree\fP (\fBProblem\fP *p)"
.br
.ti -1c
.RI "virtual \fB~RandomTree\fP ()"
.br
.in -1c
.SS "Protected Methods"

.in +1c
.ti -1c
.RI "virtual \fBMSLNode\fP * \fBSelectNode\fP (const \fBMSLVector\fP &\fBx\fP, \fBMSLTree\fP *t, bool forward)"
.br
.RI "\fIReturn the nearest neighbor in the graph.\fP"
.ti -1c
.RI "virtual \fBMSLVector\fP \fBSelectInput\fP (const \fBMSLVector\fP &x1, const \fBMSLVector\fP &x2, \fBMSLVector\fP &nx_best, bool &success, bool forward)"
.br
.RI "\fISelect the input that gets closest to x2 from x1.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
Naively extend the tree by random node selection (not really an \fBRRT\fP).
.PP
Grow a tree incrementally by simply selecting vertex at random and  moving in a random direction from the chosen vertex. It is not  really a Rapidly-exploring Random Tree since there is no random sampling over the state space to 'pull' the tree. 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "RandomTree::RandomTree (\fBProblem\fP * p)"
.PP
.SS "virtual RandomTree::~RandomTree ()\fC [inline, virtual]\fP"
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "\fBMSLVector\fP RandomTree::SelectInput (const \fBMSLVector\fP & x1, const \fBMSLVector\fP & x2, \fBMSLVector\fP & nx_best, bool & success, bool forward)\fC [protected, virtual]\fP"
.PP
Select the input that gets closest to x2 from x1.
.PP
Reimplemented from \fBRRT\fP.
.SS "\fBMSLNode\fP * RandomTree::SelectNode (const \fBMSLVector\fP & x, \fBMSLTree\fP * t, bool forward)\fC [protected, virtual]\fP"
.PP
Return the nearest neighbor in the graph.
.PP
Reimplemented from \fBRRT\fP.

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for Motion Strategy Library from the source code.
