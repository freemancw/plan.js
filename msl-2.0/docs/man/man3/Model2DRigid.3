.TH "Model2DRigid" 3 "24 Jul 2003" "Motion Strategy Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Model2DRigid \- A holonomic rigid robot in a 2D world. 
.SH SYNOPSIS
.br
.PP
\fC#include <model2d.h>\fP
.PP
Inherits \fBModel2D\fP.
.PP
Inherited by \fBModel2DRigidCar\fP, \fBModel2DRigidChain\fP, \fBModel2DRigidDyncar\fP, \fBModel2DRigidLander\fP, and \fBModel2DRigidMulti\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBModel2DRigid\fP (string path)"
.br
.ti -1c
.RI "virtual \fB~Model2DRigid\fP ()"
.br
.ti -1c
.RI "virtual \fBMSLVector\fP \fBIntegrate\fP (const \fBMSLVector\fP &\fBx\fP, const \fBMSLVector\fP &u, const double &h)"
.br
.RI "\fIPerform integration from state x, using input u, over time step h.\fP"
.ti -1c
.RI "virtual \fBMSLVector\fP \fBStateTransitionEquation\fP (const \fBMSLVector\fP &\fBx\fP, const \fBMSLVector\fP &u)"
.br
.RI "\fIThe state transition equation, or equations of motion, xdot=f(x,u).\fP"
.ti -1c
.RI "\fBMSLVector\fP \fBLinearInterpolate\fP (const \fBMSLVector\fP &x1, const \fBMSLVector\fP &x2, const double &a)"
.br
.RI "\fILinearly interpolate two state while respecting topology.\fP"
.ti -1c
.RI "virtual \fBMSLVector\fP \fBStateDifference\fP (const \fBMSLVector\fP &x1, const \fBMSLVector\fP &x2)"
.br
.RI "\fICompute a \fBMSLVector\fP based on x2-x1. In R^n, the states are simply subtracted to make the \fBMSLVector\fP. This method exists to make things work correctly for other state-space topologies.\fP"
.ti -1c
.RI "virtual double \fBMetric\fP (const \fBMSLVector\fP &x1, const \fBMSLVector\fP &x2)"
.br
.RI "\fIA distance metric, which is Euclidean in the base class.\fP"
.ti -1c
.RI "virtual \fBMSLVector\fP \fBStateToConfiguration\fP (const \fBMSLVector\fP &\fBx\fP)"
.br
.RI "\fIA method that converts a \fBModel\fP state in to a \fBGeom\fP configuration.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
A holonomic rigid robot in a 2D world.
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "Model2DRigid::Model2DRigid (string path)"
.PP
.SS "virtual Model2DRigid::~Model2DRigid ()\fC [inline, virtual]\fP"
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "\fBMSLVector\fP Model2DRigid::Integrate (const \fBMSLVector\fP & x, const \fBMSLVector\fP & u, const double & h)\fC [virtual]\fP"
.PP
Perform integration from state x, using input u, over time step h.
.PP
Implements \fBModel\fP.
.PP
Reimplemented in \fBModel2DRigidDyncar\fP.
.SS "\fBMSLVector\fP Model2DRigid::LinearInterpolate (const \fBMSLVector\fP & x1, const \fBMSLVector\fP & x2, const double & a)\fC [virtual]\fP"
.PP
Linearly interpolate two state while respecting topology.
.PP
If a=0, then x1 is returned; if a=1, then x2 is returned. All intermediate values of $a \\in [0,1]$ yield intermediate states. This method is defined by \fBModel\fP. 
.PP
Reimplemented from \fBModel\fP.
.PP
Reimplemented in \fBModel2DRigidDyncar\fP.
.SS "double Model2DRigid::Metric (const \fBMSLVector\fP & x1, const \fBMSLVector\fP & x2)\fC [virtual]\fP"
.PP
A distance metric, which is Euclidean in the base class.
.PP
Reimplemented from \fBModel\fP.
.PP
Reimplemented in \fBModel2DRigidCarSmooth\fP.
.SS "\fBMSLVector\fP Model2DRigid::StateDifference (const \fBMSLVector\fP & x1, const \fBMSLVector\fP & x2)\fC [virtual]\fP"
.PP
Compute a \fBMSLVector\fP based on x2-x1. In R^n, the states are simply subtracted to make the \fBMSLVector\fP. This method exists to make things work correctly for other state-space topologies.
.PP
Reimplemented from \fBModel\fP.
.PP
Reimplemented in \fBModel2DRigidDyncar\fP.
.SS "\fBMSLVector\fP Model2DRigid::StateToConfiguration (const \fBMSLVector\fP & x)\fC [virtual]\fP"
.PP
A method that converts a \fBModel\fP state in to a \fBGeom\fP configuration.
.PP
Reimplemented from \fBModel2D\fP.
.PP
Reimplemented in \fBModel2DRigidCarSmooth\fP.
.SS "\fBMSLVector\fP Model2DRigid::StateTransitionEquation (const \fBMSLVector\fP & x, const \fBMSLVector\fP & u)\fC [virtual]\fP"
.PP
The state transition equation, or equations of motion, xdot=f(x,u).
.PP
Implements \fBModel\fP.
.PP
Reimplemented in \fBModel2DRigidCar\fP.

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for Motion Strategy Library from the source code.
